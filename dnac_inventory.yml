---
- hosts: all
  connection: local
  vars:
    inventory_name: test
    organization_name: Default
    network_devices:
      - hostname: DACS01M-2.asdfasdf.com
        ansible_os: zxc
        softwareType: IOS-XE
        id: 1234-2
      - hostname: DANK02M-3.asdfasdf.com
        ansible_os: qwe
        softwareType: IOS-XE
        id: 1234-3
      - hostname: DECS03M-4.asdfasdf.com
        ansible_os: asd
        softwareType: IOS-XE
        id: 1234-4
      - hostname: DBOL04M-5.asdfasdf.com
        ansible_os: asd
        softwareType: NX-OS
        id: 1234-5
      - hostname: DRDU05M-6.asdfasdf.com
        id: 1234-6
        softwareType: IOS

    user_defined:
      results:
        - item:
            id: 1234-5
          json:
            response:
              - name: ansible_osx
                value: IOS-XE
  tasks:
    - ansible.builtin.set_fact: 
        user_defined_dict: "{{ user_defined_dict | default([]) }} + [{{ { 'id': item.item.id } | combine( item.json.response | items2dict(key_name='name',value_name='value')) }} ]"
      loop: "{{ user_defined.results }}"

    - ansible.builtin.set_fact:
        complete_network_devices: "{{ complete_network_devices | default([]) }} + [{{ item | combine({'site_code': (item.hostname | regex_search('.{1}(.{3}).*', '\\1') | first)}) | combine( user_defined_dict | selectattr('id','equalto',item.id) | first | default({})) }}]"
      loop: "{{ network_devices }}"

    - ansible.controller.import:
        assets: "{{ (lookup('ansible.builtin.template', './inventory.j2') | from_json()) }}"

    - name: Add hosts to groups
      ansible.controller.group:
        name: "site_code_{{ item }}"
        inventory: "{{ inventory_name }}"
        hosts: "{{ complete_network_devices | selectattr('site_code', 'defined') | selectattr('site_code', 'equalto', item) | map(attribute='hostname') | list }}"
      loop: "{{ complete_network_devices | selectattr('site_code', 'defined') | map(attribute='site_code') | list | unique }}"
